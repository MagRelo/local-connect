worker_processes auto;
pid /run/nginx.pid;

events {
	worker_connections 768;
	# multi_accept on;
}

http {

	##
	# Basic Settings
	##

	sendfile on;
	tcp_nopush on;
	tcp_nodelay on;
	keepalive_timeout 65;
	types_hash_max_size 2048;
	# server_tokens off;

	# server_names_hash_bucket_size 64;
	# server_name_in_redirect off;

	include /etc/nginx/mime.types;
	default_type application/octet-stream;

	##
	# SSL Settings
	##

	ssl_protocols TLSv1 TLSv1.1 TLSv1.2; # Dropping SSLv3, ref: POODLE
	ssl_prefer_server_ciphers on;

	##
	# Logging Settings
	##

	# --OLD--
	# access_log /var/log/nginx/access.log;
	# error_log /var/log/nginx/error.log;
	# log_format main '$http_x_forwarded_for - $remote_user [$time_local] '
	# '"$request_method $scheme://$host$request_uri $server_protocol" '
	# '$status $body_bytes_sent "$http_referer" '
	# '"$http_user_agent" $request_time';
	# --OLD--

	# -- TEST -- https://rzetterberg.github.io/nginx-elk-logging.html
	# Use Dockers builtin resolver to find the other Docker based services
  resolver 127.0.0.11 ipv6=off;

	# Custom log format that also includes the host that processed the request
  log_format logstash '$remote_addr - $remote_user [$time_local] "$host" '
                      '"$request" $status $body_bytes_sent '
                      '"$http_referer" "$http_user_agent"';

  # Send logs to Logstash
  access_log syslog:server=logstash:5140,tag=nginx_access logstash;
  error_log syslog:server=logstash:5140,tag=nginx_error notice;

	# -- TEST -- https://rzetterberg.github.io/nginx-elk-logging.html

	##
	# Gzip Settings
	##

	gzip on;
	gzip_disable "msie6";

	gzip_vary on;
	gzip_proxied any;
	gzip_comp_level 6;
	gzip_buffers 16 8k;
	gzip_http_version 1.1;
	gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;
	gzip_min_length 256;


	# Redirect to https
	server {
    listen 80;
    server_name incentive.exchange www.incentive.exchange;

    include snippets/letsencrypt.conf;
    return 301 https://$host$request_uri;
	}

	# Redirect to no subdomain
	server {
			listen 443 ssl http2;
			server_name www.incentive.exchange;

		
			ssl_certificate /etc/letsencrypt/live/incentive.exchange-0001/fullchain.pem;
			ssl_certificate_key /etc/letsencrypt/live/incentive.exchange-0001/privkey.pem;
			ssl_trusted_certificate /etc/letsencrypt/live/incentive.exchange-0001/chain.pem;

			include snippets/ssl.conf;
			include snippets/letsencrypt.conf;

			return 301 https://incentive.exchange$request_uri;
	}

	# Main entrypoint
	server {
		listen 443 ssl http2;
		server_name incentive.exchange;

		ssl_certificate /etc/letsencrypt/live/incentive.exchange/fullchain.pem;
		ssl_certificate_key /etc/letsencrypt/live/incentive.exchange/privkey.pem;
		ssl_trusted_certificate /etc/letsencrypt/live/incentive.exchange/chain.pem;

		include snippets/ssl.conf;
		include snippets/letsencrypt.conf;

		
		location / {
			proxy_pass http://homepage:8080;
			proxy_set_header Host $host;
			proxy_set_header Upgrade $http_upgrade;
			proxy_set_header Connection "upgrade";
		}
	}

	# kibana: 5601
	server {
		listen 5601 ssl http2;
		server_name incentive.exchange;

		ssl_certificate /etc/letsencrypt/live/incentive.exchange/fullchain.pem;
		ssl_certificate_key /etc/letsencrypt/live/incentive.exchange/privkey.pem;
		ssl_trusted_certificate /etc/letsencrypt/live/incentive.exchange/chain.pem;
		include snippets/ssl.conf;
		include snippets/letsencrypt.conf;

		
		location / {
			proxy_pass http://kibana:5601;
			proxy_set_header Host $host;
			proxy_set_header Upgrade $http_upgrade;
			proxy_set_header Connection "upgrade";
		}
	}

	# elasticsearch: 9200
	server {
		listen 9200 ssl http2;
		server_name incentive.exchange;

		ssl_certificate /etc/letsencrypt/live/incentive.exchange/fullchain.pem;
		ssl_certificate_key /etc/letsencrypt/live/incentive.exchange/privkey.pem;
		ssl_trusted_certificate /etc/letsencrypt/live/incentive.exchange/chain.pem;
		include snippets/ssl.conf;
		include snippets/letsencrypt.conf;

		
		location / {
			proxy_pass http://elasticsearch:9200;
			proxy_set_header Host $host;
			proxy_set_header Upgrade $http_upgrade;
			proxy_set_header Connection "upgrade";
		}
	}

	
}
